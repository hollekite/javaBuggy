Nginx负载均衡的分发方式有4种：
1.轮询，默认采取此方式，Nginx会按照请求时间的先后顺序进行轮询分发，若某台Web Server宕机，Nginx自动将其摘掉。
2.weight，权重，即轮询的几率，值越大，被分发的可能性越大，用于后端服务器性能不均的情况。
          所有服务器默认的weight都是1
3.ip_hash,每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决共享session的问题。
4.自定义规则
upstream thinknovo {     
     server 192.168.1.11:80 down;  
     server 192.168.1.12:80 weight=2;  
     server 192.168.1.13:80;  
     server 192.168.1.14:80 backup;  
}  

down 表示当前的Web Server暂时不参与负载，处于离线状态，通常和ip_hash一起使用 
weight  默认为1.weight越大，负载的权重就越大。
backup： 其它所有的非backup 服务器宕机或者忙的时候，请求backup服务器，通常在项目中配置的是备          用服务器


thinknovo在这里只是别名，为了在location里面引用
    upstream thinknovo{
        server localhost:8080 weight=1;    
        server localhost:8081 weight=1;   
	server localhost:8082 weight=1;
    }


    server {
        listen       80;
        server_name  localhost:8080 localhost:8081;

        location / {
            proxy_pass http://thinknovo;
            proxy_connect_timeout       3;
            proxy_read_timeout          3;
            proxy_send_timeout          10;
        }

proxy_connect_timeout 默认60（s）
后端服务器连接的超时时间_发起握手协议等候响应超时时间（web服务器启动后，nginx发起握手，服务器回复，注意，此并非response响应时间，而是连接等待时间）

proxy_read_timeout 默认60（s）
连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间。即response的响应时间，并非response全部返回的时间）

proxy_send_timeout 默认60（s）
后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据的超时时间

在项目实际部署中，首先榨干web服务器的性能，再通过分布式和负载均衡来完成集群
反向代理服务器=nginx
web服务器=tomcat


tomcat两个重要的默认端口 访问端口8080 关闭端口8005
linux centos 默认占据内存200M左右
windows server 默认占据内存1~1.5G
tomcat  默认200并发，最高可以修改为500并发（server.xml）/ 占据的内存一般在512M~1G
并发，同时在使用后台服务功能的请求，200并发，代表每一秒同时可以支持200个任务处理




